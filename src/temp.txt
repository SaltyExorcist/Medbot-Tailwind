import React, { useState } from 'react';

function App() {
  const [file, setFile] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);
    const formData = new FormData();
    formData.append('file', file);
    try {
      const response = await fetch('http://localhost:5000/predict_disease', {
        method: 'POST',
        body: formData,
      });
      const data = await response.json();
      setResult(data.result);
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input type="file" onChange={handleChange} />
        <button type="submit">Submit</button>
      </form>
      {loading && <p>Loading...</p>}
      {result && (
        <ul>
          {Object.entries(result).map(([key, value]) => (
            <li key={key}>
              {key}: {value}%
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default App;

 #img=Image.open(file)
    #img = process_image(file)
    #img_data = file.read()
    #file.save("xyz.jpg")
    # decode image data into NumPy array
    #img = cv2.imdecode(np.frombuffer(img_data, np.uint8), cv2.IMREAD_COLOR)
    #img_data=cv2.imread("xyz.jpg")
    #img=cv2.resize(224,224)



    #process.py

    import cv2
import numpy as np
import tensorflow as tf
from PIL import Image

def process_image(file):
    # read image file using OpenCV
    #img_data = file.read()
    #img_array = np.frombuffer(img_data, dtype=np.uint8)
    #img = cv2.imdecode(img_array, cv2.IMREAD_GRAYSCALE)
    #img = cv2.resize(img, (224, 224))
    #arr = np.asarray(img, dtype=np.float32)
    #img = tf.keras.preprocessing.image.load_img(file, target_size=(224, 224))
    #arr = tf.keras.preprocessing.image.img_to_array(img)
    img = Image.open(file)
    return img
